{
	"info": {
		"_postman_id": "02699ba0-3bf8-40ce-8221-388b0d7b9d96",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{Pass}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}login",
					"host": [
						"{{URL}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.environment.set(\"salary\", pm.response.json().person.u_name[1]);\r",
							"\r",
							"// 1) Status code 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// 2) JSON schema\r",
							"\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"    // 3) Test multiplication\r",
							"\r",
							"x = pm.environment.get(\"salary\");\r",
							"\r",
							"pm.test(\"Multiplication test\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(x * 2);\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(x * 2.9);\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(x * 4);\r",
							"   });\r",
							"\r",
							"\r",
							"// 4) Get salary_18_months\r",
							"\r",
							"bodyData = JSON.parse(responseBody)\r",
							"value = bodyData.person.u_salary_1_5_year\r",
							"pm.environment.set(\"salary_1_5_year\", value);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 28,\r\n\"salary\": 900,\r\n\"name\": \"Sviatoslav\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}user_info",
					"host": [
						"{{URL}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.environment.set(\"age\", pm.response.json().age);\r",
							"\r",
							"// 1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// 2) JSON schema\r",
							"var schema = \r",
							"  {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"    // 3) Test multiplication\r",
							"\r",
							"x = pm.environment.get(\"salary\");\r",
							"\r",
							"pm.test(\"Multiplication test\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[1]).to.include(x * 2);\r",
							"    pm.expect(jsonData.salary[2]).to.include(x * 3);\r",
							"});\r",
							"\r",
							"\r",
							"    // 4) Test element in massive\r",
							"pm.test(\"Test element in massive\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect((jsonData.salary[2]) > (jsonData.salary[1])).to.be.true;\r",
							"    pm.expect((jsonData.salary[2]) > (jsonData.salary[0])).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "900",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}new_data",
					"host": [
						"{{URL}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// 2) JSON schema\r",
							"var schema = \r",
							"  {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"    // 3) Test multiplication\r",
							"\r",
							"x = pm.environment.get(\"weight\");\r",
							"\r",
							"pm.test(\"Multiplication test\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.daily_food).to.eql(x * 0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(x * 2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "77",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}test_pet_info",
					"host": [
						"{{URL}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// 2) JSON schema\r",
							"var schema = \r",
							"  {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"    // 3) Accordance test name\r",
							"\r",
							"nameLogin = pm.environment.get(\"login\");\r",
							"\r",
							"pm.test(\"Accordance test name\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.include(nameLogin);\r",
							"    });\r",
							"\r",
							"\r",
							"    // 4) Accordance test age\r",
							"\r",
							"ageEnv = pm.environment.get(\"age\");\r",
							"\r",
							"pm.test(\"Accordance test age\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.include(ageEnv);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{login}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}get_test_user",
					"host": [
						"{{URL}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Randomaizer\r",
							"{\r",
							"        function getRandomVar(min, max) {\r",
							"        min = Math.ceil(min);\r",
							"        max = Math.floor(max);\r",
							"        return Math.floor(Math.random() * (max - min)) + min;\r",
							"    }\r",
							"let myval = getRandomVar(0,302);\r",
							"\r",
							"    let data = JSON.parse(responseBody);\r",
							"\r",
							"pm.environment.set(\"random\", data[myval].Cur_ID)\r",
							"pm.environment.set(\"request_ID\", pm.info.requestName);\r",
							"\r",
							"}\r",
							"// Iterator\r",
							"let arr = JSON.parse(responseBody);\r",
							"let val;\r",
							"for (val of arr) {\r",
							"    console.log(val);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}currency",
					"host": [
						"{{URL}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"// 2) JSON schema\r",
							"var schema = \r",
							"  {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// Renew page for get status 200\r",
							"{\r",
							"pm.environment.set(\"status\", pm.response.code);\r",
							"a = pm.environment.get(\"status\");\r",
							"    if (a == 200) {\r",
							"     pm.test(\"Body matches string\"), function () {\r",
							"         pm.expect(pm.response.text()).to.include(\"Cur_OfficialRate\")\r",
							"     }\r",
							"     }\r",
							"    else if (a = 500) {\r",
							"           postman.setNextRequest(pm.environment.get(\"request_ID\"))\r",
							"        }\r",
							"   \r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{random}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "466",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{URL}}curr_byn",
					"host": [
						"{{URL}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}